/*              Assignment-1						*/

-- Execute the following queries in your WORKBENCH

CREATE DATABASE ORG;
USE ORG;
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(255),
    Email VARCHAR(255),
    JoinDate DATE
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    Name VARCHAR(255),
    Category VARCHAR(255),
    Price DECIMAL(10 , 2 )
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10 , 2 ),
    FOREIGN KEY (CustomerID)
        REFERENCES Customers (CustomerID)
);

CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    PricePerUnit DECIMAL(10 , 2 ),
    FOREIGN KEY (OrderID)
        REFERENCES Orders (OrderID),
    FOREIGN KEY (ProductID)
        REFERENCES Products (ProductID)
);

INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(1, 'John Doe', 'johndoe@example.com', '2020-01-10'),
(2, 'Kashish Sharma', 'kashishsharma@example.com', '2020-01-15'),
(3, 'Kajal Pardeshi', 'kajalpardeshi@example.com', '2020-07-29'),
(4, 'Neha Bagul', 'nehabagul@example.com', '2020-03-19'),
(5, 'Pratiksha Kale', 'pratikshakale@example.com', '2020-03-11'),
(6, 'Komal Mishra', 'komalmishra@example.com', '2020-02-14'),
(7, 'Shripriya Kulkarni', 'shripriyakulkarni@example.com', '2020-10-29'),
(8, 'Pooja Gupta', 'poojagupta@example.com', '2020-12-04'),
(9, 'Raj Gupta', 'rajgupta@example.com', '2020-05-22'),
(10, 'Alice Johnson', 'alicejohnson@example.com', '2020-03-05');

-- SAMPLE DATA
INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(11, 'Laptop', 'Electronics', 999.99),
(12, 'Smartphone', 'Electronics', 499.99),
(13, 'Rice flour', 'Grocery', 10.99),
(14, 'Curtains', 'Home Decor', 49.99),
(15, 'Smart TV', 'Electronics', 299.99),
(16, 'Cornflakes', 'Grocery', 45.00),
(17, 'Sofa set', 'Furniture', 599.99),
(18, 'Makeup set', 'Cosmetics', 99.99),
(19, 'Body lotion', 'Cosmetics', 10.99),
(20, 'Desk Lamp', 'Home Decor', 29.99);

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount)
VALUES
(101, 1, '2023-10-15', 2999.95),
(102, 2, '2023-02-17', 510.98),
(103, 3, '2023-09-20', 1499.97),
(104, 4, '2023-05-22', 199.98),
(105, 4, '2023-10-13', 0),
(106, 5, '2023-12-25', 87.92),
(107, 7, '2023-11-23', 2999.90),
(108, 8, '2023-01-01', 225.00),
(109, 9, '2023-10-05', 49.99),
(110, 10, '2023-12-21', 0);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity, PricePerUnit) VALUES
(111, 101, 11, 1, 999.99),
(112, 102, 12, 1, 499.99),
(113, 103, 12, 3, 499.99),
(114, 104, 18, 2, 99.99),
(115, 101, 12, 4, 499.99),
(116, 106, 13, 8, 10.99),
(117, 107, 15, 10, 299.99),
(118, 108, 16, 5, 45.00),
(119, 109, 14, 1, 49.99),
(120, 102, 19, 1, 10.99);

drop table orderdetails;
drop table orders;
drop table products;
drop table customers;

-- ---------------------------------------------------------------------------------------------------------------
/* Answer the following questions with writing the appropriate queries */

# 1. Basic Queries:

-- 1.1. List all customers.
SELECT 
    *
FROM
    customers;

-- 1.2. Show all products in the 'Electronics' category.
SELECT 
    *
FROM
    products
WHERE
    Category = 'Electronics';

-- 1.3. Find the total number of orders placed.
SELECT 
    COUNT(orderID) AS total_orders_placed
FROM
    orders;

-- 1.4. Display the details of the most recent order.
SELECT 
    *
FROM
    orders
ORDER BY OrderDate DESC
LIMIT 1;

-- --------------------------------------------------------------------------------------------------------------
# 2. Joins and Relationships:

-- 2.1. List all products along with the names of the customers who ordered them.
SELECT 
    p.Name as Product_name, c.Name as Customer_name
FROM
    Products p 
        INNER JOIN
    OrderDetails od  ON p.ProductID = od.ProductID
        INNER JOIN
    Orders o ON od.OrderID = o.OrderID
        INNER JOIN
    Customers c ON o.CustomerID = c.CustomerID;


-- 2.2. Show orders that include more than one product.
SELECT 
    o.OrderID,
    COUNT(od.OrderID) AS num_of_products 
FROM
    Orders o 
        INNER JOIN
    OrderDetails od ON o.OrderID = od.OrderID
GROUP BY o.OrderID
HAVING COUNT(od.orderID) > 1;


-- 2.3. Find the total sales amount for each customer.
SELECT 
    c.CustomerID,
    c.name,
    SUM(o.TotalAmount) AS total_sales_for_each_customer
FROM
    customers c
        INNER JOIN
    orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID;

-- --------------------------------------------------------------------------------------------------------------
-- 3. Aggregation and Grouping:

-- 3.1. Calculate the total revenue generated by each product category.
SELECT 
    p.Category,
    SUM(od.PricePerUnit * od.Quantity) AS total_revenue_generated_by_each_category
FROM
    products p
        INNER JOIN
    orderdetails od ON p.ProductID = od.ProductID
GROUP BY p.Category;


-- 3.2. Determine the average order value.
SELECT 
    AVG(TotalAmount) AS average_order_value
FROM
    orders;


-- 3.3. Find the month with the highest number of orders.
SELECT 
    MONTHNAME(orderdate) AS highest_order_month,
    COUNT(MONTH(orderdate)) AS total_orders
FROM
    orders
GROUP BY MONTHNAME(orderdate)
ORDER BY total_orders DESC
LIMIT 1;

-- --------------------------------------------------------------------------------------------------------------
-- 4. Subqueries and Nested Queries:

-- 4.1. Identify customers who have not placed any orders.
SELECT 
    *
FROM
    customers
WHERE
    customerID NOT IN (SELECT 
            customerID
        FROM
            orders);

-- 4.2. Find products that have never been ordered.
SELECT 
    *
FROM
    products
WHERE
    productID NOT IN (SELECT 
            productID
        FROM
            orderdetails);


-- 4.3. Show the top 3 best-selling products.
SELECT 
    sq.*
FROM
    (SELECT 
        od.productID,
            p.name AS product_name,
            SUM(od.Quantity) AS total_orders_placed
    FROM
        orderdetails od
    INNER JOIN products p ON od.ProductID = p.ProductID
    GROUP BY od.productID
    ORDER BY total_orders_placed DESC) AS sq
LIMIT 3;

-- --------------------------------------------------------------------------------------------------------------
-- 5. Date and Time Functions:
-- 5.1. List orders placed in the last month.
SELECT 
    *
FROM
    Orders
WHERE
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);


-- 5.2. Determine the oldest customer in terms of membership duration.
SELECT 
    *
FROM
    Customers
WHERE
    joindate = (SELECT 
            MIN(joindate)
        FROM
            Customers);
    
-- --------------------------------------------------------------------------------------------------------------
-- 6. Advanced Queries:
-- 6.1. Rank customers based on their total spending.
select s.*, rank() over(order by s.total_spending desc) as rank_of_customers_basedon_total_spending
from
(SELECT 
    c.CustomerID, c.Name, SUM(o.totalAmount) AS total_spending
FROM
    Orders o
        JOIN
    Customers c ON c.CustomerID = o.customerID
GROUP BY CustomerID , Name
ORDER BY total_spending) as s;


-- 6.2. Identify the most popular product category.
select b.*, dense_rank() over(order by no_of_products desc) as popular_product_category_ranking
from (select category, count(category) as no_of_products
from products
group by category) b;


-- 6.3. Calculate the month-over-month growth rate in sales.
SELECT a.*,
rank() over(order by a.total_monthly_sale desc) as monthly_growth_rate
from
(select monthname(orderdate) as month_of_year, sum(TotalAmount) as total_monthly_sale
from orders
group by monthname(orderdate)
order by total_monthly_sale desc) a;

-- --------------------------------------------------------------------------------------------------------------
-- 7. Data Manipulation and Updates:
-- 7.1. Add a new customer to the Customers table.
insert into  Customers
values
(11, 'Taylor Swift', 'taylorswift@example.com', '2024-10-04');

#Checking updated records
SELECT * FROM customers;


-- 7.2. Update the price of a specific product
UPDATE products 
SET 
    price = 199.99
WHERE
    productID = 18;

#Checking updated records
SELECT * FROM products;